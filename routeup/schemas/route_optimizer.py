#
# Copyright (c) 2024 by Dribia Data Research.
# This file is part of project RouteUp,
# and is released under the MIT License Agreement.
# See the LICENSE file for more information.
#
"""Route Optimizer Schemas."""
from pydantic import Field, model_validator

from ..core import config
from ..core.config.enums import RouteMode
from ..core.exceptions import CapacityError
from .base import BaseSchema


class Fleet(BaseSchema):
    """Fleet schema."""

    number_of_vehicles: int = Field(
        ..., le=config.MAX_VEHICLES, description="Number of vehicles in the fleet"
    )
    capacity: int = Field(
        ...,
        le=config.MAX_VEHICLE_CAPACITY,
        description="Number of vehicles in the fleet",
    )


class RouteOptimizerInput(BaseSchema):
    """Schema for input data used by the route optimizer.

    Attributes:
        mode (str): A string indicating the mode of the optimizer, must be either "inbound" or "outbound".
        fleet (Dict[int, int]): A dictionary representing the fleet with vehicle amount as keys
            and their respective capacities as values.
        time_matrix (List[List[int]]): A 2D list representing the time matrix for travel between locations.
        demands (List[int]): A list of integers representing the passangers at each location.
        max_travel_time (int): An integer specifying the maximum allowed travel time for the routes.

    Note:
        This schema is designed to define the structure of input data required by the route optimizer
        for efficient route planning and optimization.
    """

    mode: RouteMode = Field(
        default=RouteMode.INBOUND,
        description="A string indicating the mode of the optimizer, must be either 'inbound' or 'outbound'",
    )
    fleet: list[Fleet]
    time_matrix: list[list[int]]
    demands: list[int]
    max_travel_time: int
    slack_time: int = 120

    @model_validator(mode="after")
    def fleet_capacity_larger_than_demands(self):
        """Validate that the total fleet capacity is larger than the total number of reservations."""
        total_capacity = sum(
            fleet_element.capacity * fleet_element.number_of_vehicles
            for fleet_element in self.fleet
        )
        total_demands = sum(self.demands)
        if total_capacity < total_demands:
            raise CapacityError(
                "Total fleet capacity must be larger or equal to the "
                "total number of reservations."
            )
        return self


class RouteStop(BaseSchema):
    """Schema representing a route stop in the service, capturing essential features.

    Attributes:
        stop_id (int): Unique identifier for the stop.
        stop_demand (int): Passengers at the stop.
        vehicle_occupancy (int): Current occupancy of the vehicle at the stop.
        travel_time (int): Current travel time of the vehible at the stop.

    Note:
        This schema defines the structure of a route stop in the service, capturing key features
        necessary for route optimization and service planning.
    """

    stop_id: int
    stop_demand: int
    travel_time: int


class Route(BaseSchema):
    """Schema representing a vehicle route in the service, incorporating essential features.

    Attributes:
        vehicle_capacity (int): Maximum capacity of the vehicle.
        vehicle_travel_occupancy (int): Maximum occupancy of the vehicle during the route.
        vehicle_travel_time (int): Total travel time for the entire route.
        route_stops (List[RouteStop]): List of stops along the route, each represented by a RouteStop instance.

    Note:
        This schema defines the structure of a vehicle route in the service, encompassing crucial features
        for route optimization and comprehensive service planning.
    """

    vehicle_capacity: int
    vehicle_travel_occupancy: int
    vehicle_travel_time: int
    route_stops: list[RouteStop]


class RouteOptimizerOutput(BaseSchema):
    """Schema representing the output of a route optimizer.

    Attributes:
        max_travel_time (int): Maximum allowed travel time for a route.
        routes (List[Route]): List of routes optimized by the algorithm, each represented by a Route instance.

    Note:
        This schema defines the structure of the output generated by a route optimizer,
        providing insights into optimized routes and overall service planning.
    """

    max_travel_time: int
    slack_time: int
    routes: list[Route]


class GridSearchOutput(BaseSchema):
    """Schema representing the output of a grid search."""

    extra_time: int
    extra_vehicles: Fleet
    message: str
